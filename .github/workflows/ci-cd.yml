name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/fixfix-bot2

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run tests
        run: |
          echo " Running tests..."
          python test_github_actions.py
          echo "✅ Tests completed successfully!"

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Включен деплой
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment..."
            echo "📅 Deployment time: $(date)"
            echo "🐧 System info: $(uname -a)"
            echo "🐳 Docker version: $(docker --version)"
            echo "📦 Docker Compose version: $(docker-compose --version)"
            
            # Создаем директорию если её нет
            mkdir -p /opt/fixfix-bot
            cd /opt/fixfix-bot
            echo "📁 Working directory: $(pwd)"
            
            # Check existing files
            echo "📋 Existing files:"
            ls -la || echo "Directory is empty"
            
            # Создаем .env файл
            echo "📝 Creating .env file..."
            cat > .env << 'ENV_EOF'
            # Telegram Bot
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            REQUESTS_GROUP_ID=${{ secrets.REQUESTS_GROUP_ID }}
            ADMIN_IDS=${{ secrets.ADMIN_IDS }}
            
            # Database
            DB_HOST=postgres
            DB_PORT=5432
            DB_NAME=fixfix_bot
            DB_USER=postgres
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            # API
            API_HOST=0.0.0.0
            API_PORT=8000
            API_DEBUG=false
            ENV_EOF
            
            # Создаем docker-compose.yml
            echo "📝 Creating docker-compose.yml..."
            cat > docker-compose.yml << 'COMPOSE_EOF'
            version: '3.8'
            
            services:
              # PostgreSQL база данных
              postgres:
                image: postgres:15-alpine
                container_name: fixfix_postgres
                environment:
                  POSTGRES_DB: ${DB_NAME:-fixfix_bot}
                  POSTGRES_USER: ${DB_USER:-postgres}
                  POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                ports:
                  - "127.0.0.1:5432:5432"
                networks:
                  - fixfix_network
                restart: unless-stopped
            
              # Основное приложение (API + Bot)
              app:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                container_name: fixfix_app
                environment:
                  - DB_HOST=postgres
                  - DB_PORT=5432
                  - DB_NAME=${DB_NAME:-fixfix_bot}
                  - DB_USER=${DB_USER:-postgres}
                  - DB_PASSWORD=${DB_PASSWORD:-password}
                  - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
                  - REQUESTS_GROUP_ID=${REQUESTS_GROUP_ID:-1004796553922}
                  - ADMIN_IDS=${ADMIN_IDS:-}
                  - DEBUG=${DEBUG:-false}
                ports:
                  - "8000:8000"
                depends_on:
                  - postgres
                networks:
                  - fixfix_network
                volumes:
                  - ./logs:/app/logs
                restart: unless-stopped
            
            volumes:
              postgres_data:
            
            networks:
              fixfix_network:
                driver: bridge
            COMPOSE_EOF
            
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove old containers
            docker-compose down || true
            
            # Start services with new image
            docker-compose up -d
            
            echo "✅ Deployment completed successfully!"
            
            # Show running containers
            docker ps
            
            # Show logs for debugging
            echo "📋 Checking container logs..."
            echo "=== PostgreSQL logs ==="
            docker logs fixfix_postgres --tail=10 || echo "PostgreSQL container not found"
            
            echo "=== App logs ==="
            docker logs fixfix_app --tail=20 || echo "App container not found"
            
            echo "=== Docker Compose status ==="
            docker-compose ps
            
            echo "=== Environment check ==="
            echo "DB_HOST: $DB_HOST"
            echo "DB_PORT: $DB_PORT"
            echo "TELEGRAM_TOKEN: ${TELEGRAM_TOKEN:0:10}..." # Показываем только начало токена
            
            echo "=== File check ==="
            ls -la
            echo "=== .env content (without secrets) ==="
            cat .env | grep -v TOKEN | grep -v PASSWORD
            
            echo "=== Docker Compose config ==="
            docker-compose config
            
            echo "✅ Deployment completed successfully!"