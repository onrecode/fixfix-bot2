services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: fixfix_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fixfix_bot}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - fixfix_network
    restart: unless-stopped

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: fixfix_redis
    ports:
      - "6379:6379"
    networks:
      - fixfix_network
    restart: unless-stopped

  # Основное приложение
  app:
    image: ghcr.io/onrecode/fixfix-bot2:latest
    # Для продакшена можно использовать конкретный тег:
    # image: ghcr.io/onrecode/fixfix-bot2:${IMAGE_TAG:-latest}
    container_name: fixfix_app
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - fixfix_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # Nginx для проксирования
  nginx:
    image: nginx:alpine
    container_name: fixfix_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - fixfix_network
    restart: unless-stopped

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: fixfix_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fixfix_network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: fixfix_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - fixfix_network
    restart: unless-stopped

  # Telegram Bot (отдельный сервис)
  bot:
    image: ghcr.io/onrecode/fixfix-bot2:latest
    # Для продакшена можно использовать конкретный тег:
    # image: ghcr.io/onrecode/fixfix-bot2:${IMAGE_TAG:-latest}
    container_name: fixfix_bot
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
    depends_on:
      - postgres
    networks:
      - fixfix_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    command: ["python", "main.py"]

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  fixfix_network:
    driver: bridge
