import os
from dotenv import load_dotenv
from datetime import datetime
import uuid
import re
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardMarkup
from .keyboards import *

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
REQUESTS_GROUP_ID = int(os.getenv("REQUESTS_GROUP_ID", "-1004796553922"))
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "123456789").split(",")]

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
user_requests = {}
request_counter = 1

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
import httpx
import json

# URL API (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env)
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")

# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================
async def safe_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, parse_mode=None, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Markdown"""
    try:
        await update.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception as e:
        if "Can't parse entities" in str(e) or "parse entities" in str(e):
            await update.message.reply_text(text, reply_markup=reply_markup)
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ Markdown –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
        else:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise e

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown"""
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))

def get_safe_value(value, default="–ù–µ —É–∫–∞–∑–∞–Ω–æ"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ default"""
    if value is None or str(value).strip() == "":
        return default
    return value

async def create_request_via_api(request_data: dict, user_id: int) -> dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç API
        api_request = {
            "category": request_data["category"],
            "service": request_data.get("service", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            "description": request_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"),
            "work_format": map_work_format_to_enum(request_data.get("work_format", "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å")),
            "address": request_data.get("address"),
            "preferred_time": map_time_to_enum(request_data.get("preferred_time", "‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è"))
        }
        
        # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        api_request = {k: v for k, v in api_request.items() if v is not None}
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}/requests/",
                params={"user_id": user_id},
                json=api_request,
                timeout=30.0
            )
            
            if response.status_code == 201:
                return response.json()
            else:
                error_detail = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                raise ValueError(f"–û—à–∏–±–∫–∞ API: {error_detail}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        raise e

def map_work_format_to_enum(work_format: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ enum –¥–ª—è API"""
    mapping = {
        "üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º": "home_visit",
        "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å": "remote", 
        "üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É": "pickup",
        "üè¢ –í –æ—Ñ–∏—Å": "office"
    }
    return mapping.get(work_format, "remote")

def map_time_to_enum(time_pref: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ enum –¥–ª—è API"""
    mapping = {
        "üåÖ –£—Ç—Ä–æ (9:00-12:00)": "morning",
        "‚òÄÔ∏è –î–µ–Ω—å (12:00-18:00)": "day",
        "üåÜ –í–µ—á–µ—Ä (18:00-22:00)": "evening",
        "‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è": "any"
    }
    return mapping.get(time_pref, "any")

async def send_request_to_channel(request: dict, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É fixfix"""
    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        request_id = escape_markdown(get_safe_value(request['request_id']))
        username = escape_markdown(get_safe_value(request['username'], "–ë–µ–∑ –∏–º–µ–Ω–∏"))
        category = escape_markdown(get_safe_value(request['category']))
        service = escape_markdown(get_safe_value(request.get('service')))
        description = escape_markdown(get_safe_value(request.get('description')))
        work_format = escape_markdown(get_safe_value(request.get('work_format')))
        address = escape_markdown(get_safe_value(request.get('address'), "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"))
        preferred_time = escape_markdown(get_safe_value(request.get('preferred_time'), "–õ—é–±–æ–µ"))
        phone = escape_markdown(get_safe_value(request.get('phone')))
        created_at = escape_markdown(get_safe_value(request['created_at'])[:16])
        status = escape_markdown(get_safe_value(request['status']))
        
        channel_text = (
            f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* @{username}\n"
            f"üìù *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üîß *–£—Å–ª—É–≥–∞:* {service}\n"
            f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n"
            f"üìç *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {work_format}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {address}\n"
            f"‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {preferred_time}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω–∞:* {created_at}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å:* {status}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        keyboard = [
            ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"],
            ["üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É"],
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –≥—Ä—É–ø–ø—ã
        if REQUESTS_GROUP_ID == 0 or REQUESTS_GROUP_ID is None:
            raise ValueError("ID –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è REQUESTS_GROUP_ID")
        
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É —Å ID: {REQUESTS_GROUP_ID}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_message(
            chat_id=REQUESTS_GROUP_ID,
            text=channel_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request['request_id']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É {REQUESTS_GROUP_ID}")
        
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ #{request['request_id']}: {str(e)}"
        print(error_message)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if "Chat not found" in str(e):
            error_message += f"\n\nüîç *–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
            error_message += f"1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã: `{REQUESTS_GROUP_ID}`\n"
            error_message += f"2. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n"
            error_message += f"3. –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞\n"
            error_message += f"4. –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n\n"
            error_message += f"üí° *–†–µ—à–µ–Ω–∏–µ:*\n"
            error_message += f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –≥—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥–æ–π /chatid –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ\n"
            error_message += f"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n"
            error_message += f"3. –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, —Å–¥–µ–ª–∞–π—Ç–µ –µ–µ –ø—É–±–ª–∏—á–Ω–æ–π –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=error_message,
                    parse_mode="Markdown"
                )
            except Exception as admin_error:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {admin_error}")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
async def get_chat_id_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    await safe_send_message(update, context, 
        f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*\n\n"
        f"üÜî *ID:* `{chat_id}`\n"
        f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {chat_title}\n"
        f"üë§ *–¢–∏–ø:* {update.effective_chat.type}",
        parse_mode="Markdown"
    )

# ==============================================================================
# –°–ï–†–í–ò–°–ù–´–ï –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê
# ==============================================================================
async def check_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ /check: –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    –í—ã–∑—ã–≤–∞–µ—Ç API endpoint /requests/check, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É.
    """
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await safe_send_message(update, context, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ API_BASE_URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ—Ä–µ–Ω—å API (–≤ –ø—Ä–æ–¥–µ: http://app:8000/api/v1)
        url = f"{API_BASE_URL}/requests/check"
        async with httpx.AsyncClient(timeout=20.0) as client:
            resp = await client.post(url, params={"admin_id": user_id})
            if resp.status_code == 200:
                data = resp.json()
                await safe_send_message(
                    update,
                    context,
                    (
                        "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n"
                        f"ID: {data.get('request_id')}\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
                        f"–£—Å–ª—É–≥–∞: {data.get('service')}"
                    )
                )
            else:
                try:
                    detail = resp.json().get("detail")
                except Exception:
                    detail = resp.text
                await safe_send_message(
                    update,
                    context,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {detail} (HTTP {resp.status_code})"
                )
    except Exception as e:
        await safe_send_message(update, context, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# ==============================================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ==============================================================================
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –±–æ—Ç–∞"""
    text = (
        "üîß *fixfix* ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ä–µ–º–æ–Ω—Ç –ü–ö!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:"
    )
    await safe_send_message(update, context, text, parse_mode="Markdown", reply_markup=main_menu())

async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = update.message.text
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
    if category in ["üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", 
                   "üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥", 
                   "üåê ¬´–°–ª–∞–±—ã–π Wi-Fi / –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä¬ª", "üîí VPN –∏ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", 
                   "‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"]:
        
        global request_counter
        user_requests[user_id] = {
            "request_id": f"FX-{datetime.now().strftime('%Y%m%d')}-{request_counter:03d}",
            "user_id": user_id,
            "username": update.effective_user.username or update.effective_user.first_name,
            "category": category,
            "status": "–Ω–æ–≤–∞—è",
            "created_at": datetime.now().isoformat()
        }
        request_counter += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if "üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç" in category:
        await safe_send_message(update, context, "üîç –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", reply_markup=problems_menu())
    elif "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" in category:
        await safe_send_message(update, context, "‚öôÔ∏è –ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", reply_markup=setup_menu())
    elif "üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å" in category:
        await safe_send_message(update, context, "üì∑ –ö–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=device_setup_menu())
    elif "üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥" in category:
        await safe_send_message(update, context, "üöÄ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å?", reply_markup=upgrade_menu())
    elif "üåê Wi-Fi" in category:
        await safe_send_message(update, context, "üåê –ö–∞–∫–∞—è –ø–æ–º–æ—â—å —Å Wi-Fi?", reply_markup=wifi_menu())
    elif "üîí VPN" in category:
        await safe_send_message(update, context, "üîí –ö–∞–∫—É—é —É—Å–ª—É–≥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?", reply_markup=security_menu())
    elif "‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å" in category:
        await safe_send_message(update, context, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=custom_request_menu())
    # –ö–Ω–æ–ø–∫–∞ "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏" —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ main.py

async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service = update.message.text
    user_id = update.effective_user.id
    
    print(f"DEBUG: service_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —É—Å–ª—É–≥–æ–π: {service}")
    
    if user_id in user_requests:
        user_requests[user_id]["service"] = service
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if "üîß –°–æ–±—Ä–∞—Ç—å –ü–ö —Å –Ω—É–ª—è" in service:
            await safe_send_message(update, context, "üîß –î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π —Å–æ–±–∏—Ä–∞–µ–º –ü–ö?", reply_markup=pc_build_menu())
        elif "üíª –ü–æ–¥–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö" in service:
            await safe_send_message(update, context, "üíª –ö–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å?", reply_markup=pc_build_menu())
        elif "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" in service:
            # –î–ª—è "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await safe_send_message(update, context, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=back_menu())
        else:
            await safe_send_message(update, context, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=back_menu())

async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    description = update.message.text
    user_id = update.effective_user.id
    
    print(f"DEBUG: description_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {description}")
    
    if user_id in user_requests:
        # –†–∞–Ω–Ω—è—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
        if len(description.strip()) < 10:
            await safe_send_message(
                update,
                context,
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
                reply_markup=back_menu()
            )
            return
        user_requests[user_id]["description"] = description
        await safe_send_message(update, context, "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?", reply_markup=work_format_menu())

async def work_format_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    work_format = update.message.text
    user_id = update.effective_user.id
    
    print(f"DEBUG: work_format_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {work_format}")
    
    if user_id in user_requests:
        user_requests[user_id]["work_format"] = work_format
        
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å
        if "üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º" in work_format or "üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É" in work_format:
            await safe_send_message(update, context, 
                "üè† –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n"
                "–ü—Ä–∏–º–µ—Ä: –ü—Ä–æ—Å–ø–µ–∫—Ç –º–∏—Ä–∞ 188–± –∫–æ—Ä–ø2, –∫–≤ 5, –ø–æ—Å–ª–µ 18:00",
                reply_markup=back_menu()
            )
        else:
            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –±–µ–∑ –≤—ã–µ–∑–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–õ—é–±–æ–µ –≤—Ä–µ–º—è"
            user_requests[user_id]["preferred_time"] = "‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è"
            await safe_send_message(update, context, "üìû –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_menu())

async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    time_preference = update.message.text
    user_id = update.effective_user.id
    
    print(f"DEBUG: time_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –≤—Ä–µ–º–µ–Ω–µ–º: {time_preference}")
    
    if user_id in user_requests:
        user_requests[user_id]["preferred_time"] = time_preference
        await safe_send_message(update, context, "üìû –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:", reply_markup=contact_menu())

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    print(f"DEBUG: contact_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"DEBUG: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {'–∫–æ–Ω—Ç–∞–∫—Ç' if update.message.contact else '—Ç–µ–∫—Å—Ç'}")
    
    if update.message.contact:
        phone = update.message.contact.phone_number
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {phone}")
    else:
        phone = update.message.text
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {phone}")
    
    if user_id in user_requests:
        user_requests[user_id]["phone"] = phone
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        request = user_requests[user_id]
        confirm_text = (
            f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:*\n\n"
            f"üÜî *–ù–æ–º–µ—Ä:* {request['request_id']}\n"
            f"üìù *–£—Å–ª—É–≥–∞:* {request['category']} ‚Üí {request.get('service', '')}\n"
            f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {request.get('description', '')}\n"
            f"üìç *–§–æ—Ä–º–∞—Ç:* {request.get('work_format', '')}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {request.get('address', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {request.get('preferred_time', '–õ—é–±–æ–µ')}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}"
        )
        
        await safe_send_message(update, context, confirm_text, parse_mode="Markdown", reply_markup=confirm_menu())

async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = update.effective_user.id
    action = update.message.text
    
    print(f"DEBUG: confirm_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –¥–µ–π—Å—Ç–≤–∏–µ–º: {action}")
    
    if user_id not in user_requests:
        await safe_send_message(update, context, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏", reply_markup=main_menu())
        return
    
    if action == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É":
        request = user_requests[user_id]
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['category', 'work_format', 'preferred_time', 'phone']
        missing_fields = []
        
        for field in required_fields:
            if field not in request or not request[field]:
                missing_fields.append(field)
        
        if missing_fields:
            await safe_send_message(update, context,
                f"‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=back_menu()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
        if 'description' not in request or len(request.get('description', '').strip()) < 10:
            # –û—á–∏—Å—Ç–∏–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ø–∞–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è
            if 'description' in request:
                del request['description']
            await safe_send_message(update, context,
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
                reply_markup=back_menu()
            )
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ API
            api_response = await create_request_via_api(request, user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            request.update(api_response)
            request["status"] = "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
            request["updated_at"] = datetime.now().isoformat()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await send_request_to_channel(request, context)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await safe_send_message(update, context,
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request['request_id']} –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"üìû –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {request.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
                reply_markup=main_menu()
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            del user_requests[user_id]
            
        except ValueError as e:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API
            await safe_send_message(update, context,
                f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=back_menu()
            )
            print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API: {e}")
            
        except Exception as e:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞
            await safe_send_message(update, context,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=main_menu()
            )
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
    
    elif action == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    
    elif action == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        del user_requests[user_id]
        await safe_send_message(update, context, "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu())

async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ù–∞–∑–∞–¥'"""
    user_id = update.effective_user.id
    
    print(f"DEBUG: back_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if user_id not in user_requests:
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    
    request = user_requests[user_id]
    
    # –≠—Ç–∞–ø 6: –í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞
    if 'phone' in request:
        del request['phone']
        # –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å –≤—ã–µ–∑–¥–æ–º/–∑–∞–±–æ—Ä–æ–º
        if 'preferred_time' in request:
            await safe_send_message(update, context, 
                "‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=time_menu()
            )
        elif 'address' in request:
            await safe_send_message(update, context, 
                "‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=time_menu()
            )
        else:
            await safe_send_message(update, context, 
                "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?",
                reply_markup=work_format_menu()
            )
        return
    
    # –≠—Ç–∞–ø 5: –í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    if 'preferred_time' in request:
        del request['preferred_time']
        # –ï—Å–ª–∏ –±—ã–ª –≤–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å
        if 'address' in request:
            await safe_send_message(update, context, 
                "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:\n"
                "–ü—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞ 15, –∫–≤ 5, –ø–æ—Å–ª–µ 18:00",
                reply_markup=back_menu()
            )
        else:
            await safe_send_message(update, context, 
                "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?",
                reply_markup=work_format_menu()
            )
        return
    
    # –≠—Ç–∞–ø 4: –í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
    if 'address' in request:
        del request['address']
        await safe_send_message(update, context, 
            "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?",
            reply_markup=work_format_menu()
        )
        return
    
    # –≠—Ç–∞–ø 3: –í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
    if 'work_format' in request:
        del request['work_format']
        await safe_send_message(update, context, 
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
            reply_markup=back_menu()
        )
        return
    
    # –≠—Ç–∞–ø 2: –í–≤–µ–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
    if 'description' in request:
        del request['description']
        category = request['category']
        if "üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç" in category:
            await safe_send_message(update, context, "üîç –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", reply_markup=problems_menu())
        elif "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" in category:
            await safe_send_message(update, context, "‚öôÔ∏è –ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", reply_markup=setup_menu())
        elif "üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å" in category:
            await safe_send_message(update, context, "üì∑ –ö–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=device_setup_menu())
        elif "üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥" in category:
            await safe_send_message(update, context, "üöÄ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å?", reply_markup=upgrade_menu())
        elif "üåê Wi-Fi" in category:
            await safe_send_message(update, context, "üåê –ö–∞–∫–∞—è –ø–æ–º–æ—â—å —Å Wi-Fi?", reply_markup=wifi_menu())
        elif "üîí VPN" in category:
            await safe_send_message(update, context, "üîí –ö–∞–∫—É—é —É—Å–ª—É–≥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?", reply_markup=security_menu())
        elif "‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å" in category:
            await safe_send_message(update, context, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=custom_request_menu())
        return
    
    # –≠—Ç–∞–ø 1: –í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞ -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if 'service' in request:
        del request['service']
        category = request['category']
        if "üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç" in category:
            await safe_send_message(update, context, "üîç –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", reply_markup=problems_menu())
        elif "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" in category:
            await safe_send_message(update, context, "‚öôÔ∏è –ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?", reply_markup=setup_menu())
        elif "üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å" in category:
            await safe_send_message(update, context, "üì∑ –ö–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=device_setup_menu())
        elif "üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥" in category:
            await safe_send_message(update, context, "üöÄ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å?", reply_markup=upgrade_menu())
        elif "üåê Wi-Fi" in category:
            await safe_send_message(update, context, "üåê –ö–∞–∫–∞—è –ø–æ–º–æ—â—å —Å Wi-Fi?", reply_markup=wifi_menu())
        elif "üîí VPN" in category:
            await safe_send_message(update, context, "üîí –ö–∞–∫—É—é —É—Å–ª—É–≥—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏?", reply_markup=security_menu())
        elif "‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å" in category:
            await safe_send_message(update, context, "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=custom_request_menu())
        return
    
    # –≠—Ç–∞–ø 0: –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if 'category' in request:
        del user_requests[user_id]
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç - –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ==============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)
# ==============================================================================
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    print(f"DEBUG: text_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
    if user_id not in user_requests:
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    
    request = user_requests[user_id]
    
    # –≠—Ç–∞–ø 1: –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏)
    if ('service' in request and 
        'description' not in request and
        '‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' not in request.get('service', '')):
        await description_handler(update, context)
        return
    
    # –≠—Ç–∞–ø 1.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç" - —Å—Ä–∞–∑—É –≤–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
    if ('service' in request and 
        '‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç' in request['service'] and
        'description' not in request):
        request['description'] = text
        await safe_send_message(update, context, 
            "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?",
            reply_markup=work_format_menu()
        )
        return
    
    # –≠—Ç–∞–ø 2: –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ (–¥–ª—è –≤—ã–µ–∑–¥–∞/–∑–∞–±–æ—Ä–∞)
    if ('work_format' in request and 
        'address' not in request and
        ('üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º' in request['work_format'] or 
         'üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É' in request['work_format'])):
        
        request['address'] = text
        await safe_send_message(update, context, 
            "‚è∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=time_menu()
        )
        return
    
    # –≠—Ç–∞–ø 3: –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞)
    if ('address' in request and 
        'preferred_time' not in request and
        ('üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º' in request['work_format'] or 
         'üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É' in request['work_format'])):
        
        request['preferred_time'] = text
        await safe_send_message(update, context, 
            "üìû –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:",
            reply_markup=contact_menu()
        )
        return
    
    # –≠—Ç–∞–ø 4: –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é
    if ('preferred_time' in request and 'phone' not in request) or \
       ('work_format' in request and 'phone' not in request and 
        'üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º' not in request['work_format'] and 
        'üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É' not in request['work_format']):
        await contact_handler(update, context)
        return
    
    # –≠—Ç–∞–ø 3.5: –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" –≤ –º–µ–Ω—é —Å–±–æ—Ä–∫–∏ –ü–ö
    if ('service' in request and 
        'description' not in request and
        ('üîß –°–æ–±—Ä–∞—Ç—å –ü–ö —Å –Ω—É–ª—è' in request['service'] or 
         'üíª –ü–æ–¥–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö' in request['service']) and
        text == "üìã –ú–æ–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"):
        
        await safe_send_message(update, context, 
            "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ü–ö:",
            reply_markup=back_menu()
        )
        return
    
    # –≠—Ç–∞–ø 5: –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏")
    if ('category' in request and 
        '‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏' in request['category'] and
        'service' not in request):
        request['service'] = "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç"
        request['description'] = text
        await safe_send_message(update, context, 
            "üìç –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?",
            reply_markup=work_format_menu()
        )
        return
    
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ==============================================================================
# –¢–ï–°–¢–û–í–´–ï –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ==============================================================================
async def my_requests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
    user_id = update.effective_user.id
    text = update.message.text
    
    print(f"DEBUG: my_requests_handler –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å —Ç–µ–∫—Å—Ç–æ–º: {text}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é "–ú–æ–∏ –∑–∞—è–≤–∫–∏"
    if text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏":
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        await safe_send_message(update, context, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=my_requests_menu())
        return
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        await safe_send_message(update, context, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=my_requests_menu())
        return
    elif text == "üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É":
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await safe_send_message(update, context, "‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...", reply_markup=my_requests_menu())
        return
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await safe_send_message(update, context, "üîß –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_requests_list = [req for req in user_requests.values() if req['user_id'] == user_id]
    
    if not user_requests_list:
        await safe_send_message(update, context, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=main_menu())
        return
    
    response = "üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n"
    for req in user_requests_list:
        response += (
            f"üÜî *–ó–∞—è–≤–∫–∞ #{req['request_id']}*\n"
            f"üìù {req['category']} ‚Üí {req.get('service', '')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {req['status']}\n"
            f"üìÖ {req['created_at'][:10]}\n\n"
        )
    
    await safe_send_message(update, context, response, parse_mode="Markdown", reply_markup=my_requests_menu())

async def test_keyboards_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    keyboards_to_test = [
        ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", main_menu()),
        ("–ü—Ä–æ–±–ª–µ–º—ã", problems_menu()),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", setup_menu()),
        ("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", device_setup_menu()),
        ("–ê–ø–≥—Ä–µ–π–¥", upgrade_menu()),
        ("–°–±–æ—Ä–∫–∞ –ü–ö", pc_build_menu()),
        ("Wi-Fi", wifi_menu()),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", security_menu()),
        ("–í—Ä–µ–º—è", time_menu()),
        ("–ö–æ–Ω—Ç–∞–∫—Ç—ã", contact_menu()),
        ("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", confirm_menu()),
        ("–ù–∞–∑–∞–¥", back_menu())
    ]
    
    await safe_send_message(update, context, "üß™ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    for name, keyboard in keyboards_to_test:
        await safe_send_message(update, context, f"üìã {name}:", reply_markup=keyboard)
        await asyncio.sleep(2)
    
    await safe_send_message(update, context, "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=remove_keyboard())

async def test_specific_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard_name = context.args[0] if context.args else "main_menu"
    
    keyboards_dict = {
        "main": main_menu(),
        "problems": problems_menu(),
        "time": time_menu(),
        "contact": contact_menu(),
        "confirm": confirm_menu()
    }
    
    if keyboard_name in keyboards_dict:
        await safe_send_message(update, context,
            f"üìã –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard_name}",
            reply_markup=keyboards_dict[keyboard_name]
        )
    else:
        await safe_send_message(update, context,
            f"‚ùå –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ '{keyboard_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(keyboards_dict.keys())}"
        )

async def debug_state_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if user_id in user_requests:
        state = user_requests[user_id]
        debug_text = (
            f"üîç *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n\n"
            f"üÜî ID: {state.get('request_id', '–ù–µ—Ç')}\n"
            f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state.get('category', '–ù–µ—Ç')}\n"
            f"üîß –£—Å–ª—É–≥–∞: {state.get('service', '–ù–µ—Ç')}\n"
            f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {state.get('description', '–ù–µ—Ç')}\n"
            f"üìç –§–æ—Ä–º–∞—Ç: {state.get('work_format', '–ù–µ—Ç')}\n"
            f"üè† –ê–¥—Ä–µ—Å: {state.get('address', '–ù–µ—Ç')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {state.get('preferred_time', '–ù–µ—Ç')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {state.get('phone', '–ù–µ—Ç')}"
        )
        await safe_send_message(update, context, debug_text, parse_mode="Markdown")
    else:
        await safe_send_message(update, context, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏")

async def check_config_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    config_info = (
        f"üîß *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:*\n\n"
        f"ü§ñ *–¢–æ–∫–µ–Ω:* {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' if TELEGRAM_TOKEN else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}\n"
        f"üë• *ID –≥—Ä—É–ø–ø—ã:* `{REQUESTS_GROUP_ID}`\n"
        f"üë®‚Äçüíº *–ê–¥–º–∏–Ω—ã:* {len(ADMIN_IDS)} —à—Ç.\n"
        f"üìù *–ò–º—è –±–æ—Ç–∞:* {os.getenv('BOT_NAME', 'fixfix_bot')}\n\n"
        f"üåê *API URL:* {os.getenv('TELEGRAM_API_URL', 'https://api.telegram.org')}\n\n"
        f"üí° *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã:*\n"
        f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É\n"
        f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /chatid –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ"
    )
    
    await safe_send_message(update, context, config_info, parse_mode="Markdown")