stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Кэширование зависимостей
cache:
  paths:
    - venv/
    - .cache/pip/

# Тестирование
test:
  stage: test
  image: python:3.11-slim
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  script:
    - source venv/bin/activate
    - python test_request_flow.py
  only:
    - main
    - merge_requests

# Сборка Docker образа
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main

# Развертывание на сервер
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Создаем .env.production на сервере
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
      cd /opt/fixfix-bot
      
      # Создаем .env.production
      cat > .env.production << 'ENV_EOF'
      DB_HOST=postgres
      DB_PORT=5432
      DB_NAME=fixfix_bot
      DB_USER=fixfix_user
      DB_PASSWORD=$DB_PASSWORD
      DATABASE_URL=postgresql+asyncpg://fixfix_user:$DB_PASSWORD@postgres:5432/fixfix_bot
      TELEGRAM_TOKEN=$TELEGRAM_TOKEN
      REQUESTS_GROUP_ID=$REQUESTS_GROUP_ID
      ADMIN_IDS=$ADMIN_IDS
      API_HOST=0.0.0.0
      API_PORT=8000
      API_DEBUG=false
      API_BASE_URL=http://localhost:8000
      DEBUG=false
      SECRET_KEY=$SECRET_KEY
      LOG_LEVEL=INFO
      LOG_FILE=/app/logs/app.log
      BACKUP_RETENTION_DAYS=30
      BACKUP_SCHEDULE=0 2 * * *
      MAX_CONNECTIONS=20
      WORKER_PROCESSES=2
      ENV_EOF
      
      # Останавливаем старые контейнеры
      docker-compose -f docker-compose.prod.yml down
      
      # Удаляем старый образ
      docker rmi fixfix-bot_app:latest || true
      
      # Собираем новый образ
      docker-compose -f docker-compose.prod.yml build app
      
      # Запускаем сервисы
      docker-compose -f docker-compose.prod.yml up -d
      
      # Проверяем статус
      docker-compose -f docker-compose.prod.yml ps
      
      # Проверяем логи
      docker-compose -f docker-compose.prod.yml logs app --tail=20
      EOF
  environment:
    name: production
    url: https://$DEPLOY_HOST
  only:
    - main
  when: manual  # Ручной запуск для безопасности
