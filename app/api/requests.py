"""
API endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏
"""
from typing import List, Optional
import random
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.database.connection import get_db
from app.services.request_service import RequestService
from app.schemas.requests import (
    RequestCreate, 
    RequestResponse, 
    RequestUpdate, 
    RequestStatusUpdate,
    RequestListResponse,
    RequestCommentCreate,
    RequestCommentResponse
)
from app.database.models import RequestStatus, User, WorkFormat, PreferredTime
from app.config import settings
import httpx

router = APIRouter(prefix="/requests", tags=["requests"])


@router.post("/", response_model=RequestResponse, status_code=status.HTTP_201_CREATED)
async def create_request(
    request_data: RequestCreate,
    user_id: Optional[int] = Query(None, description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–∏–ª–∏ telegram_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"),
    telegram_id: Optional[int] = Query(None, description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.

    –õ–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω telegram_id: –Ω–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    - –ò–Ω–∞—á–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id:
        - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É user_id
        - –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å user_id –∫–∞–∫ telegram_id (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        - –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ telegram_id: —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        resolved_user: Optional[User] = None

        if telegram_id is not None:
            result = await db.execute(select(User).where(User.telegram_id == telegram_id))
            resolved_user = result.scalar_one_or_none()
            if resolved_user is None:
                # –°–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(telegram_id=telegram_id)
                db.add(new_user)
                await db.commit()
                await db.refresh(new_user)
                resolved_user = new_user
        elif user_id is not None:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
            result = await db.execute(select(User).where(User.id == user_id))
            resolved_user = result.scalar_one_or_none()
            if resolved_user is None:
                # –ü—Ä–æ–±—É–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∞—Ç—å –∫–∞–∫ telegram_id (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –±–æ—Ç–æ–º)
                result = await db.execute(select(User).where(User.telegram_id == user_id))
                resolved_user = result.scalar_one_or_none()
                if resolved_user is None:
                    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å—á–∏—Ç–∞—è, —á—Ç–æ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ telegram_id –≤ user_id
                    new_user = User(telegram_id=user_id)
                    db.add(new_user)
                    await db.commit()
                    await db.refresh(new_user)
                    resolved_user = new_user

        if resolved_user is None:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        service = RequestService(db)
        request = await service.create_request(resolved_user.id, request_data)
        return request
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")


async def _send_service_log(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —á–∞—Ç (Telegram)."""
    try:
        token = settings.telegram.token if settings.telegram else None
        chat_id = settings.telegram.requests_group_id if settings.telegram else None
        if not token or not chat_id:
            return
        api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        payload = {"chat_id": chat_id, "text": text}
        async with httpx.AsyncClient(timeout=10.0) as client:
            await client.post(api_url, json=payload)
    except Exception:
        # –ë–µ–∑ –ø–∞–¥–µ–Ω–∏—è API
        pass


@router.post("/check")
async def check_flow(admin_id: int = Query(..., description="Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), db: AsyncSession = Depends(get_db)):
    """–°–µ—Ä–≤–∏—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.

    –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é/—É—Å–ª—É–≥—É/—Ñ–æ—Ä–º–∞—Ç/–≤—Ä–µ–º—è, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç timestamp
    –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è), —Å–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –∏ –ø–æ–º–µ—á–∞–µ—Ç –µ—ë –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —á–∞—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏.
    """
    if not settings.telegram or admin_id not in (settings.telegram.admin_ids or []):
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    step = "start"
    try:
        # –ö–∞—Ç–∞–ª–æ–≥ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–æ—Ç–æ–º)
        catalog = {
            "üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç": [
                "üíª –¢–æ—Ä–º–æ–∑–∏—Ç/–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è",
                "üîß –í—ã—Å–∫–∞–∫–∏–≤–∞—é—Ç –æ—à–∏–±–∫–∏",
                "ü¶† –í–∏—Ä—É—Å—ã –∏ —Ä–µ–∫–ª–∞–º–∞",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
            "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É": [
                "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É",
                "üåê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
                "üñ®Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
            "üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": [
                "üñ®Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä/—Å–∫–∞–Ω–µ—Ä",
                "üéÆ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É",
                "üñ±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º—ã—à—å/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
                "üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                "üì∫ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
            "üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥": [
                "üíæ –£–≤–µ–ª–∏—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å",
                "üîß –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä",
                "üíø –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSD –¥–∏—Å–∫",
                "üéÆ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É",
                "üñ•Ô∏è –ó–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è",
                "‚ùÑÔ∏è –£–ª—É—á—à–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ",
                "üîß –°–æ–±—Ä–∞—Ç—å –ü–ö —Å –Ω—É–ª—è",
                "üíª –ü–æ–¥–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
            "üåê ¬´–°–ª–∞–±—ã–π Wi-Fi / –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä¬ª": [
                "üì∂ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Wi-Fi —Ä–æ—É—Ç–µ—Ä",
                "üåê –£—Å–∏–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
                "üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å",
                "üì° –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä",
                "üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
            "üîí VPN –∏ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö": [
                "üîê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN",
                "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã",
                "üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                "üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ",
                "üîë –ü–∞—Ä–æ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
                "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
            ],
        }

        step = "randomize"
        timestamp = datetime.utcnow().isoformat()
        category = random.choice(list(catalog.keys()))
        service = random.choice(catalog[category])
        work_format = random.choice(list(WorkFormat))
        preferred_time = random.choice(list(PreferredTime))
        description = f"auto-check {timestamp}"
        address = f"auto-check address {timestamp}" if work_format in (WorkFormat.HOME_VISIT, WorkFormat.PICKUP) else None

        step = "ensure_user"
        result = await db.execute(select(User).where(User.telegram_id == admin_id))
        db_user = result.scalar_one_or_none()
        if db_user is None:
            db_user = User(telegram_id=admin_id)
            db.add(db_user)
            await db.commit()
            await db.refresh(db_user)

        step = "create_request"
        service_layer = RequestService(db)
        payload = {
            "category": category,
            "service": service,
            "description": description,
            "work_format": work_format,
            "address": address,
            "preferred_time": preferred_time,
        }
        request = await service_layer.create_request(db_user.id, RequestCreate(**payload))

        step = "complete_request"
        await service_layer.update_request_status(
            request.request_id,
            RequestStatusUpdate(status=RequestStatus.COMPLETED, comment="auto-check"),
            changed_by=db_user.id,
        )

        log_text = (
            "‚úÖ CHECK OK\n"
            f"step: {step}\n"
            f"request_id: {request.request_id}\n"
            f"category: {category}\nservice: {service}\nformat: {work_format.value}\ntime: {preferred_time.value}"
        )
        await _send_service_log(log_text)
        return {"ok": True, "request_id": request.request_id, "category": category, "service": service}

    except Exception as e:
        err_text = (
            "‚ùå CHECK FAIL\n"
            f"step: {step}\n"
            f"error: {str(e)}"
        )
        await _send_service_log(err_text)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {step}: {e}")


@router.get("/{request_id}", response_model=RequestResponse)
async def get_request(
    request_id: str,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID"""
    service = RequestService(db)
    request = await service.get_request(request_id)
    
    if not request:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    return request


@router.get("/user/{user_id}", response_model=RequestListResponse)
async def get_user_requests(
    user_id: int,
    status: Optional[RequestStatus] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    service = RequestService(db)
    requests, total = await service.get_user_requests(user_id, status, page, per_page)
    
    return RequestListResponse(
        requests=requests,
        total=total,
        page=page,
        per_page=per_page
    )


@router.put("/{request_id}/status", response_model=RequestResponse)
async def update_request_status(
    request_id: str,
    status_update: RequestStatusUpdate,
    changed_by: int = Query(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å"),
    db: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        service = RequestService(db)
        request = await service.update_request_status(request_id, status_update, changed_by)
        return request
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.post("/{request_id}/comments", response_model=RequestCommentResponse, status_code=status.HTTP_201_CREATED)
async def add_comment(
    request_id: str,
    comment_data: RequestCommentCreate,
    user_id: int = Query(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    db: AsyncSession = Depends(get_db)
):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ"""
    try:
        service = RequestService(db)
        comment = await service.add_comment(
            request_id, 
            user_id, 
            comment_data.comment,
            comment_data.is_internal
        )
        return comment
    except ValueError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")


@router.get("/", response_model=RequestListResponse)
async def get_all_requests(
    status: Optional[RequestStatus] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    service = RequestService(db)
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –≤ —Å–µ—Ä–≤–∏—Å–µ
    return RequestListResponse(
        requests=[],
        total=0,
        page=page,
        per_page=per_page
    )
