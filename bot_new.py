"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è FixFix —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.config import settings
from app.database.connection import init_db, close_db, get_db
from app.services.request_service import RequestService
from app.database.models import User, Request, RequestStatus, WorkFormat, PreferredTime
from app.schemas.requests import RequestCreate

# –ò–º–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from bot.handlers import *
from bot.keyboards import *

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_requests = {}


async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async for db in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await db.execute(
            select(User).where(User.telegram_id == user.id)
        )
        db_user = result.scalar_one_or_none()
        
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.add(db_user)
            await db.commit()
            await db.refresh(db_user)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user.id] = "main_menu"
        user_requests[user.id] = {}
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–æ —Ä–µ–º–æ–Ω—Ç—É –ü–ö!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —É—Å–ª—É–≥—É:"
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=main_menu()
        )


async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = update.effective_user.id
    category = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['category'] = category
    user_states[user_id] = "service_selection"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é —É—Å–ª—É–≥
    if "–≥–ª—é—á–∏—Ç" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=problems_menu()
        )
    elif "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" in category.lower() or "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=setup_menu()
        )
    elif "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=device_setup_menu()
        )
    elif "–∞–ø–≥—Ä–µ–π–¥" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ø–≥—Ä–µ–π–¥–∞:",
            reply_markup=upgrade_menu()
        )
    elif "wi-fi" in category.lower() or "—Ä–æ—É—Ç–µ—Ä" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ Wi-Fi:",
            reply_markup=wifi_menu()
        )
    elif "vpn" in category.lower() or "–∑–∞—â–∏—Ç–∞" in category.lower():
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:",
            reply_markup=security_menu()
        )
    else:
        # –î–ª—è "—Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"
        user_states[user_id] = "description_input"
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=custom_request_menu()
        )


async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    user_id = update.effective_user.id
    service = update.message.text
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['service'] = service
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    if service != "‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        user_states[user_id] = "description_input"
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=custom_request_menu()
        )
    else:
        user_states[user_id] = "description_input"
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=custom_request_menu()
        )


async def description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    description = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    if len(description.strip()) < 10:
        await update.message.reply_text(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=custom_request_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['description'] = description
    user_states[user_id] = "work_format_selection"
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=work_format_menu()
    )


async def work_format_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    user_id = update.effective_user.id
    work_format_text = update.message.text
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ enum
    work_format_mapping = {
        "üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º": WorkFormat.HOME_VISIT,
        "üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å": WorkFormat.REMOTE,
        "üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É": WorkFormat.PICKUP,
        "üè¢ –í –æ—Ñ–∏—Å": WorkFormat.OFFICE
    }
    
    work_format = work_format_mapping.get(work_format_text)
    if not work_format:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=work_format_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['work_format'] = work_format
    user_states[user_id] = "time_selection"
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=time_menu()
    )


async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    time_text = update.message.text
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ enum
    time_mapping = {
        "üåÖ –£—Ç—Ä–æ (9:00-12:00)": PreferredTime.MORNING,
        "‚òÄÔ∏è –î–µ–Ω—å (12:00-18:00)": PreferredTime.DAY,
        "üåÜ –í–µ—á–µ—Ä (18:00-21:00)": PreferredTime.EVENING,
        "‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è": PreferredTime.ANY
    }
    
    preferred_time = time_mapping.get(time_text)
    if not preferred_time:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=time_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['preferred_time'] = preferred_time
    user_states[user_id] = "contact_selection"
    
    await update.message.reply_text(
        "–î–ª—è —Å–≤—è–∑–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=contact_menu()
    )


async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
        user_states[user_id] = "phone_input"
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
            reply_markup=back_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['phone'] = phone
    user_states[user_id] = "address_input"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∞–¥—Ä–µ—Å
    work_format = user_requests[user_id].get('work_format')
    if work_format in [WorkFormat.HOME_VISIT, WorkFormat.PICKUP]:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞:",
            reply_markup=back_menu()
        )
    else:
        # –ê–¥—Ä–µ—Å –Ω–µ –Ω—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_confirmation(update, context)


async def phone_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    phone = update.message.text
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.replace('+', '').replace('-', '').replace(' ', '').isdigit():
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:",
            reply_markup=back_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['phone'] = phone
    user_states[user_id] = "address_input"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∞–¥—Ä–µ—Å
    work_format = user_requests[user_id].get('work_format')
    if work_format in [WorkFormat.HOME_VISIT, WorkFormat.PICKUP]:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–µ–∑–¥–∞:",
            reply_markup=back_menu()
        )
    else:
        # –ê–¥—Ä–µ—Å –Ω–µ –Ω—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_confirmation(update, context)


async def address_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    user_id = update.effective_user.id
    address = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if len(address.strip()) < 5:
        await update.message.reply_text(
            "‚ùå –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=back_menu()
        )
        return
    
    if user_id not in user_requests:
        user_requests[user_id] = {}
    
    user_requests[user_id]['address'] = address
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_confirmation(update, context)


async def show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.effective_user.id
    
    if user_id not in user_requests:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu()
        )
        return
    
    request_data = user_requests[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        "üìã *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üîß *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {request_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚öôÔ∏è *–£—Å–ª—É–≥–∞:* {request_data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìç *–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:* {request_data.get('work_format', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè† *–ê–¥—Ä–µ—Å:* {request_data.get('address', '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {request_data.get('preferred_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    user_states[user_id] = "confirmation"
    
    await update.message.reply_text(
        confirmation_text,
        parse_mode="Markdown",
        reply_markup=confirm_menu()
    )


async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = update.effective_user.id
    action = update.message.text
    
    if action == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É":
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        try:
            async for db in get_db():
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(
                    select(User).where(User.telegram_id == user_id)
                )
                db_user = result.scalar_one_or_none()
                
                if not db_user:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=main_menu()
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
                request_service = RequestService(db)
                request_create = RequestCreate(
                    category=user_requests[user_id]['category'],
                    service=user_requests[user_id].get('service'),
                    description=user_requests[user_id].get('description'),
                    work_format=user_requests[user_id]['work_format'],
                    address=user_requests[user_id].get('address'),
                    preferred_time=user_requests[user_id]['preferred_time']
                )
                
                db_request = await request_service.create_request(db_user.id, request_create)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
                await send_request_to_channel(db_request, context)
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_states[user_id] = "main_menu"
                user_requests[user_id] = {}
                
                await update.message.reply_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{db_request.request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=main_menu()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )
    
    elif action == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_states[user_id] = "main_menu"
        user_requests[user_id] = {}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=main_menu()
        )
    
    elif action == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É
        user_states[user_id] = "main_menu"
        user_requests[user_id] = {}
        await update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=main_menu()
        )


async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    user_id = update.effective_user.id
    
    if user_id not in user_states:
        user_states[user_id] = "main_menu"
    
    current_state = user_states[user_id]
    
    # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if current_state == "service_selection":
        user_states[user_id] = "main_menu"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=main_menu()
        )
    elif current_state == "description_input":
        user_states[user_id] = "service_selection"
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
        category = user_requests.get(user_id, {}).get('category', '')
        if "–≥–ª—é—á–∏—Ç" in category.lower():
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É:",
                reply_markup=problems_menu()
            )
        elif "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" in category.lower():
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                reply_markup=setup_menu()
            )
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    elif current_state == "work_format_selection":
        user_states[user_id] = "description_input"
        await update.message.reply_text(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
            reply_markup=custom_request_menu()
        )
    elif current_state == "time_selection":
        user_states[user_id] = "work_format_selection"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:",
            reply_markup=work_format_menu()
        )
    elif current_state == "contact_selection":
        user_states[user_id] = "time_selection"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=time_menu()
        )
    elif current_state == "address_input":
        user_states[user_id] = "contact_selection"
        await update.message.reply_text(
            "–î–ª—è —Å–≤—è–∑–∏ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=contact_menu()
        )
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states[user_id] = "main_menu"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=main_menu()
        )


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if user_id not in user_states:
        user_states[user_id] = "main_menu"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:",
            reply_markup=main_menu()
        )
        return
    
    current_state = user_states[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == "description_input":
        await description_handler(update, context)
    elif current_state == "phone_input":
        await phone_input_handler(update, context)
    elif current_state == "address_input":
        await address_input_handler(update, context)
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )


async def my_requests_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    try:
        async for db in get_db():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            db_user = result.scalar_one_or_none()
            
            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=main_menu()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request_service = RequestService(db)
            requests, total = await request_service.get_user_requests(db_user.id)
            
            if not requests:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –≤—ã–±—Ä–∞–≤ —É—Å–ª—É–≥—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é!",
                    reply_markup=my_requests_menu()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏
            response_text = f"üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ (–≤—Å–µ–≥–æ: {total}):\n\n"
            
            for req in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                status_emoji = {
                    RequestStatus.NEW: "üÜï",
                    RequestStatus.IN_PROGRESS: "üîÑ",
                    RequestStatus.COMPLETED: "‚úÖ",
                    RequestStatus.CANCELLED: "‚ùå",
                    RequestStatus.REJECTED: "üö´"
                }
                
                response_text += (
                    f"{status_emoji.get(req.status, 'üìã')} "
                    f"*–ó–∞—è–≤–∫–∞ #{req.request_id}*\n"
                    f"üìù {req.category}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {req.status.value}\n"
                    f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                )
            
            if total > 5:
                response_text += f"... –∏ –µ—â–µ {total - 5} –∑–∞—è–≤–æ–∫"
            
            await update.message.reply_text(
                response_text,
                parse_mode="Markdown",
                reply_markup=my_requests_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )


async def send_request_to_channel(request: Request, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
        channel_text = (
            f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request.request_id}*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* ID {request.user_id}\n"
            f"üìù *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {request.category}\n"
            f"üîß *–£—Å–ª—É–≥–∞:* {request.service or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* {request.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"üìç *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: {request.work_format.value}\n"
            f"‚Ä¢ –ê–¥—Ä–µ—Å: {request.address or '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
            f"‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {request.preferred_time.value}\n\n"
            f"üìÖ *–°–æ–∑–¥–∞–Ω–∞:* {request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å:* {request.status.value}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        keyboard = [
            ["‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"],
            ["üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É"],
            ["üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_message(
            chat_id=settings.telegram.requests_group_id,
            text=channel_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        
        logger.info(f"–ó–∞—è–≤–∫–∞ {request.request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        await init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = settings.telegram.token
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_handler))
    application.add_handler(CommandHandler("myrequests", my_requests_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex(r'^üî¥ –ö–æ–º–ø—å—é—Ç–µ—Ä –≥–ª—é—á–∏—Ç/–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^üì∑ –ü–æ–¥–∫–ª—é—á–∏—Ç—å/–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^üöÄ –•–æ—á—É –∞–ø–≥—Ä–µ–π–¥$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^üåê ¬´–°–ª–∞–±—ã–π Wi-Fi / –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä¬ª$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^üîí VPN –∏ –ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^‚úçÔ∏è –û–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏$'), my_requests_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ª—É–≥
    application.add_handler(MessageHandler(filters.Regex(r'^(üíª –¢–æ—Ä–º–æ–∑–∏—Ç/–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è|üîß –í—ã—Å–∫–∞–∫–∏–≤–∞—é—Ç –æ—à–∏–±–∫–∏|ü¶† –í–∏—Ä—É—Å—ã –∏ —Ä–µ–∫–ª–∞–º–∞|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), service_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^(üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É|üåê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç|üñ®Ô∏è –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), service_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^(üñ®Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä/—Å–∫–∞–Ω–µ—Ä|üéÆ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏—Å—Ç–∞–≤–∫—É|üñ±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º—ã—à—å/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É|üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω|üì∫ –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–≤–∏–∑–æ—Ä|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), service_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^(üíæ –£–≤–µ–ª–∏—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å|üîß –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä|üíø –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å SSD –¥–∏—Å–∫|üéÆ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É|üñ•Ô∏è –ó–∞–º–µ–Ω–∏—Ç—å –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è|‚ùÑÔ∏è –£–ª—É—á—à–∏—Ç—å –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ|üîß –°–æ–±—Ä–∞—Ç—å –ü–ö —Å –Ω—É–ª—è|üíª –ü–æ–¥–±–æ—Ä –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), service_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^(üì∂ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Wi-Fi —Ä–æ—É—Ç–µ—Ä|üåê –£—Å–∏–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª|üîê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å|üì° –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä|üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), category_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^(üîê –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN|üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏—Ä—É—Å—ã|üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö|üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ|üîë –ü–∞—Ä–æ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞|‚úçÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)$'), category_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã
    application.add_handler(MessageHandler(filters.Regex(r'^(üè† –í—ã–µ–∑–¥ –Ω–∞ –¥–æ–º|üíª –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å|üöö –ó–∞–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É|üè¢ –í –æ—Ñ–∏—Å)$'), work_format_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    application.add_handler(MessageHandler(filters.Regex(r'^(üåÖ –£—Ç—Ä–æ \(9:00-12:00\)|‚òÄÔ∏è –î–µ–Ω—å \(12:00-18:00\)|üåÜ –í–µ—á–µ—Ä \(18:00-21:00\)|‚è∞ –õ—é–±–æ–µ –≤—Ä–µ–º—è)$'), time_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex(r'^üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä$'), contact_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.Regex(r'^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É|üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), confirm_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    application.add_handler(MessageHandler(filters.Regex(r'^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$'), back_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.run_polling()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
        asyncio.run(close_db())
